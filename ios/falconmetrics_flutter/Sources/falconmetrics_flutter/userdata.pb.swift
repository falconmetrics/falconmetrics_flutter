// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: userdata.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Pb_UserData: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var email: String {
    get {return _email ?? String()}
    set {_email = newValue}
  }
  /// Returns true if `email` has been explicitly set.
  var hasEmail: Bool {return self._email != nil}
  /// Clears the value of `email`. Subsequent reads from it will return its default value.
  mutating func clearEmail() {self._email = nil}

  var phoneNumber: String {
    get {return _phoneNumber ?? String()}
    set {_phoneNumber = newValue}
  }
  /// Returns true if `phoneNumber` has been explicitly set.
  var hasPhoneNumber: Bool {return self._phoneNumber != nil}
  /// Clears the value of `phoneNumber`. Subsequent reads from it will return its default value.
  mutating func clearPhoneNumber() {self._phoneNumber = nil}

  var firstName: String {
    get {return _firstName ?? String()}
    set {_firstName = newValue}
  }
  /// Returns true if `firstName` has been explicitly set.
  var hasFirstName: Bool {return self._firstName != nil}
  /// Clears the value of `firstName`. Subsequent reads from it will return its default value.
  mutating func clearFirstName() {self._firstName = nil}

  var lastName: String {
    get {return _lastName ?? String()}
    set {_lastName = newValue}
  }
  /// Returns true if `lastName` has been explicitly set.
  var hasLastName: Bool {return self._lastName != nil}
  /// Clears the value of `lastName`. Subsequent reads from it will return its default value.
  mutating func clearLastName() {self._lastName = nil}

  var dateOfBirth: String {
    get {return _dateOfBirth ?? String()}
    set {_dateOfBirth = newValue}
  }
  /// Returns true if `dateOfBirth` has been explicitly set.
  var hasDateOfBirth: Bool {return self._dateOfBirth != nil}
  /// Clears the value of `dateOfBirth`. Subsequent reads from it will return its default value.
  mutating func clearDateOfBirth() {self._dateOfBirth = nil}

  var city: String {
    get {return _city ?? String()}
    set {_city = newValue}
  }
  /// Returns true if `city` has been explicitly set.
  var hasCity: Bool {return self._city != nil}
  /// Clears the value of `city`. Subsequent reads from it will return its default value.
  mutating func clearCity() {self._city = nil}

  var state: String {
    get {return _state ?? String()}
    set {_state = newValue}
  }
  /// Returns true if `state` has been explicitly set.
  var hasState: Bool {return self._state != nil}
  /// Clears the value of `state`. Subsequent reads from it will return its default value.
  mutating func clearState() {self._state = nil}

  var postalCode: String {
    get {return _postalCode ?? String()}
    set {_postalCode = newValue}
  }
  /// Returns true if `postalCode` has been explicitly set.
  var hasPostalCode: Bool {return self._postalCode != nil}
  /// Clears the value of `postalCode`. Subsequent reads from it will return its default value.
  mutating func clearPostalCode() {self._postalCode = nil}

  var country: String {
    get {return _country ?? String()}
    set {_country = newValue}
  }
  /// Returns true if `country` has been explicitly set.
  var hasCountry: Bool {return self._country != nil}
  /// Clears the value of `country`. Subsequent reads from it will return its default value.
  mutating func clearCountry() {self._country = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _email: String? = nil
  fileprivate var _phoneNumber: String? = nil
  fileprivate var _firstName: String? = nil
  fileprivate var _lastName: String? = nil
  fileprivate var _dateOfBirth: String? = nil
  fileprivate var _city: String? = nil
  fileprivate var _state: String? = nil
  fileprivate var _postalCode: String? = nil
  fileprivate var _country: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "pb"

extension Pb_UserData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "email"),
    2: .standard(proto: "phone_number"),
    3: .standard(proto: "first_name"),
    4: .standard(proto: "last_name"),
    5: .standard(proto: "date_of_birth"),
    6: .same(proto: "city"),
    7: .same(proto: "state"),
    8: .standard(proto: "postal_code"),
    9: .same(proto: "country"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._email) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._phoneNumber) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._firstName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._lastName) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._dateOfBirth) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._city) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._state) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self._postalCode) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self._country) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._email {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._phoneNumber {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._firstName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._lastName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._dateOfBirth {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._city {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._state {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._postalCode {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._country {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_UserData, rhs: Pb_UserData) -> Bool {
    if lhs._email != rhs._email {return false}
    if lhs._phoneNumber != rhs._phoneNumber {return false}
    if lhs._firstName != rhs._firstName {return false}
    if lhs._lastName != rhs._lastName {return false}
    if lhs._dateOfBirth != rhs._dateOfBirth {return false}
    if lhs._city != rhs._city {return false}
    if lhs._state != rhs._state {return false}
    if lhs._postalCode != rhs._postalCode {return false}
    if lhs._country != rhs._country {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
